from flask import Flask, request
import requests
import json
import torch
from ultralytics import YOLO
from PIL import Image
import io
from concurrent.futures import ThreadPoolExecutor

app = Flask(__name__)
executor = ThreadPoolExecutor(max_workers=3)

# Configuration
LINE_CHANNEL_ACCESS_TOKEN = 'bGkMvEDLmzYSBbUoAzY6T7xN7CaaB95jlW+96WiB88KD4ZMH20xOpTh2TQUzuGoMCQMFQ5ei4sVyaLRA7SkIaO/t2FUE6xk55bGb1FD6N9HCALAF9Dnqgsaz+7xkCGC27cKcB6YSsaclXYpc/FpSqwdB04t89/1O/w1cDnyilFU='
LEAF_MODEL_PATH = 'Leaf.pt'  # โมเดลตรวจจับใบ
DISEASE_MODEL_PATH = 'DDR(ALL)0.1.pt'  # โมเดลตรวจจับโรค

# โหลดโมเดล
print("Loading YOLO models...")
try:
    # โหลดโมเดลตรวจจับใบ
    leaf_model = YOLO(LEAF_MODEL_PATH)
    leaf_model.fuse()
    leaf_model = leaf_model.cpu()
    
    # โหลดโมเดลตรวจจับโรค
    disease_model = YOLO(DISEASE_MODEL_PATH)
    disease_model.fuse()
    disease_model = disease_model.cpu()
    
    print("Models loaded successfully")
except Exception as e:
    print(f"Error loading models: {e}")
    leaf_model = None
    disease_model = None

def send_line_message(reply_token, messages):
    """ส่งข้อความไปยัง LINE"""
    url = 'https://api.line.me/v2/bot/message/reply'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    
    if not isinstance(messages, list):
        messages = [messages]

    data = {
        'replyToken': reply_token,
        'messages': messages
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=3)
        success = response.status_code == 200
        print(f"LINE API Response: {response.status_code}")
        if not success:
            print(f"Response content: {response.text}")
        return success
    except Exception as e:
        print(f"Error sending message: {e}")
        return False

def check_if_durian_leaf(image):
    """ตรวจสอบว่าเป็นใบทุเรียนหรือไม่ด้วยการตรวจสอบหลายเงื่อนไข"""
    try:
        if leaf_model is None:
            print("Leaf detection model not loaded")
            return False, 0

        # วิเคราะห์ภาพด้วย YOLO classification
        results = leaf_model(image)[0]
        
        # เพิ่มการล็อกข้อมูลสำหรับการ debug
        print(f"Raw results: {results}")
        
        if not hasattr(results, 'probs') or results.probs is None:
            print("No probability data found")
            return False, 0
            
        # แสดงความน่าจะเป็นของทุกคลาส
        probs_data = results.probs.data.cpu().numpy()
        for idx, prob in enumerate(probs_data):
            class_name = results.names[idx]
            print(f"Class: {class_name}, Probability: {prob:.3f}")
        
        # ดึงค่า confidence และ class สูงสุด
        class_idx = int(results.probs.argmax())
        confidence = float(results.probs.max())
        class_name = results.names[class_idx]
        
        print(f"Best match - Class: {class_name}, Confidence: {confidence:.3f}")
        
        # ปรับปรุงเงื่อนไขการตรวจสอบ
        is_durian = False
        final_confidence = 0
        
        if class_name == 'durian_leaf':
            # ปรับความเข้มงวดของการตรวจจับ
            confidence_threshold = 0.25  # ลดจาก 0.3
            
            # ตรวจสอบความเชื่อมั่น
            if confidence >= confidence_threshold:
                is_durian = True
                final_confidence = confidence
                print(f"Durian leaf detected with confidence: {confidence:.3f}")
            else:
                print(f"Confidence too low: {confidence:.3f} < {confidence_threshold}")
                
            # ตรวจสอบความน่าจะเป็นของคลาสอื่น
            second_best_idx = probs_data.argsort()[-2]
            second_best_prob = probs_data[second_best_idx]
            margin = confidence - second_best_prob
            
            print(f"Margin from second best class: {margin:.3f}")
            
            # ถ้าความต่างน้อยเกินไป อาจไม่แน่ใจ
            if margin < 0.1:
                print("Small margin between classes, reducing confidence")
                final_confidence *= 0.8  # ลดความเชื่อมั่นลง
        else:
            print(f"Not a durian leaf: {class_name}")
            
        return is_durian, final_confidence
            
    except Exception as e:
        print(f"Error in leaf detection: {e}")
        import traceback
        print(f"Full traceback: {traceback.format_exc()}")
        return False, 0

# ส่วนที่เพิ่มเติม: ตรวจสอบผลการทำนายทั้งหมด
def print_all_probabilities(results):
    """แสดงความน่าจะเป็นของทุกคลาส"""
    if hasattr(results, 'probs') and results.probs is not None:
        probs = results.probs.data.cpu().numpy()
        for idx, prob in enumerate(probs):
            class_name = results.names[idx]
            print(f"Class: {class_name}, Probability: {prob:.3f}")

def analyze_image(image_content):
    """วิเคราะห์รูปภาพจาก binary content"""
    try:
        if disease_model is None:
            print("Disease model not loaded")
            return None, 0

        # แปลง bytes เป็น PIL Image
        image = Image.open(io.BytesIO(image_content))
        
        # วิเคราะห์โรคด้วย YOLOv11
        results = disease_model(image)
        print(f"Raw results: {results}")  # debug info
        
        if not results:
            print("No results from model")
            return None, 0
            
        result = results[0]  # get first result
        print(f"Result object: {result}")  # debug info
        
        try:
            # ดึงผลการทำนายแบบ YOLOv11 classification
            probabilities = result.probs.data.cpu().numpy()  # แปลงเป็น numpy array
            class_idx = probabilities.argmax()
            confidence = float(probabilities[class_idx])
            class_name = result.names[class_idx]
            
            print(f"Debug - Class: {class_name}, Confidence: {confidence}")
            print(f"All probabilities: {probabilities}")
            
            # ตรวจสอบค่า confidence
            if confidence < 0.2:
                print(f"Low confidence: {confidence}")
                return None, 0
                
            # ตรวจสอบชื่อคลาส
            valid_classes = ['Anthracnose', 'Normal', 'Powdery', 'Rust']
            if class_name not in valid_classes:
                print(f"Invalid class: {class_name}")
                return None, 0
                
            return class_name, confidence
            
        except Exception as e:
            print(f"Error extracting prediction: {e}")
            print(f"Result structure: {dir(result)}")  # แสดงโครงสร้างของ result
            return None, 0

    except Exception as e:
        print(f"Error in analyze_image: {e}")
        import traceback
        print(f"Full traceback: {traceback.format_exc()}")
        return None, 0

def create_response_messages(class_name, confidence):
    """สร้างข้อความผลการวิเคราะห์"""
    # กรณีไม่สามารถระบุผลได้
    if not class_name or confidence < 0.5:  
        return [{
            'type': 'text',
            'text': "⚠️ ไม่สามารถระบุผลได้\n\n"
                   "🔸 สาเหตุที่เป็นไปได้:\n"
                   "- ภาพไม่ชัดเจน\n"
                   "- แสงสว่างไม่เพียงพอ\n"
                   "- มุมถ่ายไม่เหมาะสม\n"
                   "- ไม่ใช่ภาพใบทุเรียน\n\n"
                   "🔸 คำแนะนำ:\n"
                   "1. ถ่ายในที่มีแสงสว่างเพียงพอ\n"
                   "2. ถ่ายให้เห็นใบชัดเจน\n"
                   "3. หลีกเลี่ยงเงาที่บังใบ\n"
                   "4. ถ่ายในระยะใกล้พอสมควร"
        }]

    # กรณีโรคแอนแทรคโนส
    if class_name == 'Anthracnose':
        return [{
            'type': 'text',
            'text': f"🔍 ผลการวิเคราะห์ (ความแม่นยำ {confidence:.1%}):\n"
                   f"⚠️ พบโรคแอนแทรคโนส (Anthracnose Disease)\n\n"
                   f"🔸 ลักษณะอาการ:\n"
                   f"- แผลจุดสีน้ำตาลถึงดำ\n"
                   f"- แผลมีขอบสีเหลือง\n"
                   f"- ใบอาจเหี่ยวและร่วง\n\n"
                   f"🔸 คำแนะนำการจัดการ:\n"
                   f"1. ตัดแต่งกิ่งและใบที่เป็นโรคทิ้ง\n"
                   f"2. ฉีดพ่นสารป้องกันกำจัดเชื้อรา\n"
                   f"3. ปรับปรุงการระบายอากาศ\n"
                   f"4. หลีกเลี่ยงการให้น้ำที่ใบโดยตรง"
        }]

    # กรณีใบปกติ
    elif class_name == 'Normal':
        return [{
            'type': 'text',
            'text': f"🔍 ผลการวิเคราะห์ (ความแม่นยำ {confidence:.1%}):\n"
                   f"✅ ใบปกติ ไม่พบโรค\n\n"
                   f"🔸 ลักษณะใบ:\n"
                   f"- ใบมีสีเขียวปกติ\n"
                   f"- ไม่พบร่องรอยของโรค\n\n"
                   f"🔸 คำแนะนำการดูแล:\n"
                   f"1. ดูแลรักษาตามปกติ\n"
                   f"2. รดน้ำอย่างสม่ำเสมอ\n"
                   f"3. ให้ปุ๋ยตามกำหนด\n"
                   f"4. หมั่นตรวจสอบอาการผิดปกติ"
        }]

    # กรณีโรคราแป้ง
    elif class_name == 'Powdery':
        return [{
            'type': 'text',
            'text': f"🔍 ผลการวิเคราะห์ (ความแม่นยำ {confidence:.1%}):\n"
                   f"⚠️ พบโรคราแป้ง (Powdery Mildew)\n\n"
                   f"🔸 ลักษณะอาการ:\n"
                   f"- พบผงสีขาวคล้ายแป้งบนใบ\n"
                   f"- ใบอาจบิดเบี้ยวหรือเหี่ยว\n"
                   f"- อาจพบจุดสีเหลืองบนใบ\n\n"
                   f"🔸 คำแนะนำการจัดการ:\n"
                   f"1. ฉีดพ่นสารป้องกันกำจัดเชื้อรา\n"
                   f"2. เพิ่มการระบายอากาศ\n"
                   f"3. ลดความชื้นในสวน\n"
                   f"4. กำจัดวัชพืชรอบต้น"
        }]

    # กรณีโรคราสนิม
    elif class_name == 'Rust':
        return [{
            'type': 'text',
            'text': f"🔍 ผลการวิเคราะห์ (ความแม่นยำ {confidence:.1%}):\n"
                   f"⚠️ พบโรคราสนิม (Rust Disease)\n\n"
                   f"🔸 ลักษณะอาการ:\n"
                   f"- พบจุดสีน้ำตาลแดงบนใบ\n"
                   f"- อาจพบผงสปอร์สีส้มใต้ใบ\n\n"
                   f"🔸 คำแนะนำการจัดการ:\n"
                   f"1. แยกใบที่เป็นโรคออกและเผาทำลาย\n"
                   f"2. ฉีดพ่นสารป้องกันกำจัดเชื้อรา\n"
                   f"3. ควบคุมความชื้นในสวน\n"
                   f"4. ตรวจสอบใบข้างเคียง"
        }]
    
    # กรณีอื่นๆ
    return [{
        'type': 'text',
        'text': "⚠️ ไม่สามารถระบุผลได้\n\n"
               "โปรดตรวจสอบว่าภาพที่ส่งเป็นภาพใบทุเรียน\n"
               "และถ่ายภาพในสภาพแสงที่เหมาะสม"
    }]

def process_image_message(image_id, reply_token):
    """ประมวลผลรูปภาพและส่งผลลัพธ์"""
    try:
        # ดาวน์โหลดรูปภาพ
        url = f'https://api-data.line.me/v2/bot/message/{image_id}/content'
        headers = {'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'}
        
        response = requests.get(url, headers=headers, timeout=3)
        if response.status_code != 200:
            send_line_message(reply_token, [{
                'type': 'text',
                'text': '❌ ไม่สามารถดาวน์โหลดรูปภาพได้\nกรุณาลองใหม่อีกครั้ง'
            }])
            return

        # วิเคราะห์รูปภาพและส่งผลลัพธ์
        class_name, confidence = analyze_image(response.content)
        messages = create_response_messages(class_name, confidence)
        send_line_message(reply_token, messages)

    except Exception as e:
        print(f"Error in process_image_message: {e}")
        send_line_message(reply_token, [{
            'type': 'text',
            'text': '❌ เกิดข้อผิดพลาดในการวิเคราะห์\nกรุณาลองใหม่อีกครั้ง'
        }])
        
@app.route("/webhook", methods=['POST'])
def webhook():
    """จัดการ webhook request"""
    try:
        data = request.get_json()
        if not data or 'events' not in data:
            return 'OK', 200

        for event in data['events']:
            if event.get('type') != 'message':
                continue

            message = event.get('message', {})
            reply_token = event.get('replyToken')

            if not reply_token:
                continue

            if message.get('type') == 'image':
                process_image_message(message.get('id'), reply_token)
            elif message.get('type') == 'text':
                text = message.get('text', '').strip().lower()
                if text in ['help', 'ช่วยเหลือ']:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "📱 วิธีใช้งานระบบตรวจโรคใบทุเรียน:\n\n"
                               "1. การถ่ายภาพ:\n"
                               "- ถ่ายภาพใบทุเรียนในระยะใกล้\n"
                               "- ให้แสงสว่างเพียงพอ\n"
                               "- ถ่ายให้เห็นใบชัดเจน\n\n"
                               "2. การส่งภาพ:\n"
                               "- ส่งทีละ 1 ภาพ\n"
                               "- รอผลการวิเคราะห์สักครู่\n\n"
                               "3. การอ่านผล:\n"
                               "- ระบบจะแจ้งผลการวิเคราะห์\n"
                               "- พร้อมคำแนะนำการจัดการ"
                    }])
                else:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "👋 สวัสดีครับ\n\n"
                               "ยินดีต้อนรับสู่ระบบตรวจโรคใบทุเรียน\n"
                               "กรุณาส่งรูปภาพใบทุเรียนที่ต้องการตรวจสอบ\n"
                               "หรือพิมพ์ 'help' เพื่อดูวิธีใช้งาน"
                    }])

        return 'OK', 200

    except Exception as e:
        print(f"Error in webhook: {e}")
        return 'OK', 200

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
