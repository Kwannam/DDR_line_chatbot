from flask import Flask, request
import requests
import json
import torch
from ultralytics import YOLO
from PIL import Image
import io
import gc  
from concurrent.futures import ThreadPoolExecutor
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
executor = ThreadPoolExecutor(max_workers=3)

# Configuration
LINE_CHANNEL_ACCESS_TOKEN = '5hKNTGGelohPAozp2zd/Qlk8/pS2A4RWDvMuHjeNsIoHxI7KKWbLWUHnB925anWaFH/eEMMKALyKN+s/3C/NGCOG6lYRmj56lB4wkEglQsrGPQXloKuu68+CaOAg+xeWJ8TcuNTQrlt88ozb+NwNiAdB04t89/1O/w1cDnyilFU='

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
logger.info("Loading YOLO models...")
try:
    leaf_model = YOLO('Leaf.pt')
    leaf_model.fuse()
    leaf_model = leaf_model.cpu()
    
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    logger.info(f"Using device: {device}")
    disease_models = {
        'antracnose': YOLO('Antracnose0.2.pt').to(device),
        'normal': YOLO('Normal0.2.pt').to(device),
        'phytophthora': YOLO('Phytophthora0.2.pt').to(device),
        'powdery': YOLO('Powdery0.2.pt').to(device),
        'rust': YOLO('Rust0.2.pt').to(device)
    }
    logger.info("Models loaded successfully")
except Exception as e:
    logger.error(f"Error loading models: {e}", exc_info=True)
    leaf_model = None
    disease_models = {}

def send_line_message(reply_token, messages):
    url = 'https://api.line.me/v2/bot/message/reply'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    
    data = {
        'replyToken': reply_token,
        'messages': messages
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        return response.status_code == 200
    except requests.Timeout:
        logger.error("Timeout sending LINE message")
        return False
    except Exception as e:
        logger.error(f"Error sending LINE message: {e}", exc_info=True)
        return False
    
def check_disease(image, model, disease_name):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏£‡∏Ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    try:
        results = model(image)[0]
        if not hasattr(results, 'probs') or results.probs is None:
            return False, 0
            
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏£‡∏Ñ
        probs = results.probs.data.cpu().numpy()
        class_names = results.names
        
        # ‡∏´‡∏≤index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏£‡∏Ñ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Not_Disease)
        disease_idx = None
        for idx, name in class_names.items():
            if not name.startswith('Not_'):
                disease_idx = idx
                break
                
        if disease_idx is None:
            return False, 0
            
        is_disease = float(probs[disease_idx]) > 0.5
        confidence = float(probs[disease_idx]) if is_disease else 0
        
        gc.collect()  
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
        return is_disease, confidence
        
        
    except Exception as e:
        logger.error(f"Error in check_disease: {e}", exc_info=True)
        return False, 0

def analyze_image(image_content):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        try:
            image = Image.open(io.BytesIO(image_content))
            logger.info(f"Original image size: {image.size}, format: {image.format}")
            if image.format not in ['JPEG', 'PNG', 'JPG']:
                logger.warning(f"Unsupported image format: {image.format}")
                return None, 0
                
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if image.size[0] > 1920 or image.size[1] > 1920:
                image.thumbnail((1920, 1920))
                logger.info(f"Image resized to {image.size}")
                
        except Exception as e:
            logger.error(f"Error processing image: {e}")
            return None, 0

        
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        if leaf_model is None:
            return None, 0
            
        leaf_results = leaf_model(image)[0]
        if not hasattr(leaf_results, 'probs') or leaf_results.probs is None:
            return None, 0
            
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
        leaf_class_idx = leaf_results.probs.top1
        leaf_confidence = float(leaf_results.probs.top1conf)
        
        if leaf_results.names[leaf_class_idx] != 'durian_leaf' or leaf_confidence < 0.25:
            logger.info(f"Not a durian leaf or low confidence: {leaf_results.names[leaf_class_idx]}, confidence: {leaf_confidence:.2f}")
            return None, 0
            
            
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡πÇ‡∏£‡∏Ñ
        disease_results = []
        for disease_name, model in disease_models.items():
            is_disease, confidence = check_disease(image, model, disease_name)
            if is_disease:
                disease_results.append((disease_name, confidence))
        
        if disease_results:
            best_disease = max(disease_results, key=lambda x: x[1])
            return best_disease[0].capitalize(), best_disease[1]
        
        
        if 'normal' in disease_models:
            is_normal, normal_confidence = check_disease(image, disease_models['normal'], 'normal')
            if is_normal:
                return 'Normal', normal_confidence
        
        # Clear memory
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
                
        return None, 0

    except Exception as e:
        logger.error(f"Error in analyze_image: {e}", exc_info=True)
        return None, 0


def create_response_messages(class_name, confidence):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ
    if not class_name or confidence < 0.5:  
        return [{
            'type': 'text',
            'text': "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ\n\n"
                   "üî∏ ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:\n"
                   "- ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n"
                   "- ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                   "- ‡∏°‡∏∏‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n"
                   "- ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n"
                   "üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n"
                   "1. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                   "2. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n"
                   "3. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡πÉ‡∏ö\n"
                   "4. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£"
        }]

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™
    if class_name == 'Antracnose':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%}):\n"
                   f"‚ö†Ô∏è ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™ (Anthracnose Disease)\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:\n"
                   f"- ‡πÅ‡∏ú‡∏•‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ñ‡∏∂‡∏á‡∏î‡∏≥\n"
                   f"- ‡πÅ‡∏ú‡∏•‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á\n"
                   f"- ‡πÉ‡∏ö‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏ß‡∏á\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n"
                   f"1. ‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ó‡∏¥‡πâ‡∏á\n"
                   f"2. ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤\n"
                   f"3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®\n"
                   f"4. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"
        }]

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    elif class_name == 'Normal':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%}):\n"
                   f"‚úÖ ‡πÉ‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÉ‡∏ö:\n"
                   f"- ‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥\n"
                   f"- ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•:\n"
                   f"1. ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥\n"
                   f"2. ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠\n"
                   f"3. ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n"
                   f"4. ‡∏´‡∏°‡∏±‡πà‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
        }]

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á
    elif class_name == 'Powdery':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%}):\n"
                   f"‚ö†Ô∏è ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡πÅ‡∏õ‡πâ‡∏á (Powdery Mildew)\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:\n"
                   f"- ‡∏û‡∏ö‡∏ú‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÅ‡∏õ‡πâ‡∏á‡∏ö‡∏ô‡πÉ‡∏ö\n"
                   f"- ‡πÉ‡∏ö‡∏≠‡∏≤‡∏à‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß\n"
                   f"- ‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ö‡∏ô‡πÉ‡∏ö\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n"
                   f"1. ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤\n"
                   f"2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®\n"
                   f"3. ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô\n"
                   f"4. ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ß‡∏±‡∏ä‡∏û‡∏∑‡∏ä‡∏£‡∏≠‡∏ö‡∏ï‡πâ‡∏ô"
        }]

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏°
    elif class_name == 'Rust':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%}):\n"
                   f"‚ö†Ô∏è ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏° (Rust Disease)\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:\n"
                   f"- ‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏î‡∏á‡∏ö‡∏ô‡πÉ‡∏ö\n"
                   f"- ‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏ú‡∏á‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÉ‡∏ï‡πâ‡πÉ‡∏ö\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n"
                   f"1. ‡πÅ‡∏¢‡∏Å‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏≤‡∏ó‡∏≥‡∏•‡∏≤‡∏¢\n"
                   f"2. ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤\n"
                   f"3. ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô\n"
                   f"4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"
        }]
    #‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ü‡∏ó‡∏≠‡∏õ
    elif class_name == 'Phytophthora':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.1%}):\n"
                   f"‚ö†Ô∏è ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ü‡∏ó‡∏≠‡∏õ‡πÄ‡∏ò‡∏≠‡∏£‡πà‡∏≤ (Phytophthora Disease)\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:\n"
                   f"- ‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á‡∏ï‡∏≤‡∏¢‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô \n"
                   f"- ‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏°‡∏µ‡∏™‡∏µ‡∏î‡∏≥\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n"
                   f"1. ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ó‡∏¥‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏≤‡∏ó‡∏≥‡∏•‡∏≤‡∏¢\n"
                   f"2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏î‡∏µ\n"
                   f"3. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏Ç‡∏±‡∏á‡πÉ‡∏ô‡∏î‡∏¥‡∏ô\n"
                   f"4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å"
        }]
        
        
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    return [{
        'type': 'text',
        'text': "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ\n\n"
               "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n"
               "‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
    }]

def process_image_message(image_id, reply_token):
    def async_process():
        try:
            url = f'https://api-data.line.me/v2/bot/message/{image_id}/content'
            headers = {'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'}
            
            response = requests.get(url, headers=headers, timeout=30)
            if response.status_code != 200:
                return [{
                    'type': 'text',
                    'text': '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                }]

            class_name, confidence = analyze_image(response.content)
            return create_response_messages(class_name, confidence)

        except Exception as e:
            logger.error(f"Error in async_process: {e}", exc_info=True)
            return [{
                'type': 'text',
                'text': '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            }]

    future = executor.submit(async_process)
    try:
        messages = future.result(timeout=25)
        send_line_message(reply_token, messages)
    except TimeoutError:
        logger.error("Timeout in process_image_message", exc_info=True)
        send_line_message(reply_token, [{
            'type': 'text',
            'text': '‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }])
    except Exception as e:
        logger.error(f"Error processing image message: {e}", exc_info=True)
        send_line_message(reply_token, [{
            'type': 'text',
            'text': '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }])


@app.route("/webhook", methods=['POST'])
def webhook():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ webhook request"""
    try:
        data = request.get_json()
        if not data or 'events' not in data:
            return 'OK', 200

        for event in data['events']:
            if event.get('type') != 'message':
                continue

            message = event.get('message', {})
            reply_token = event.get('replyToken')

            if not reply_token:
                continue

            if message.get('type') == 'image':
                process_image_message(message.get('id'), reply_token)
            elif message.get('type') == 'text':
                text = message.get('text', '').strip().lower()
                if text in ['help', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:\n\n"
                               "1. ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û:\n"
                               "- ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ\n"
                               "- ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                               "- ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n\n"
                               "2. ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û:\n"
                               "- ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏†‡∏≤‡∏û\n"
                               "- ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà\n\n"
                               "3. ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•:\n"
                               "- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n"
                               "- ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"
                    }])
                else:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö\n\n"
                               "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n"
                               "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n"
                               "‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'help' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    }])

        return 'OK', 200

    except Exception as e:
        logger.error(f"Error in webhook: {e}", exc_info=True)
        return 'OK', 200

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
