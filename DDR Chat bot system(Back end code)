from flask import Flask, request
import requests
import json
import torch
from ultralytics import YOLO
from PIL import Image
import io
from concurrent.futures import ThreadPoolExecutor

app = Flask(__name__)
executor = ThreadPoolExecutor(max_workers=3)

# Configuration
LINE_CHANNEL_ACCESS_TOKEN = 'bGkMvEDLmzYSBbUoAzY6T7xN7CaaB95jlW+96WiB88KD4ZMH20xOpTh2TQUzuGoMCQMFQ5ei4sVyaLRA7SkIaO/t2FUE6xk55bGb1FD6N9HCALAF9Dnqgsaz+7xkCGC27cKcB6YSsaclXYpc/FpSqwdB04t89/1O/w1cDnyilFU='
MODEL_PATH = 'DDR(Rust)0.1.pt'

# ‡πÇ‡∏´‡∏•‡∏î YOLO model
print("Loading YOLO model...")
try:
    model = YOLO(MODEL_PATH, task='classify')
    print("YOLO model loaded successfully")
except Exception as e:
    print(f"Error loading YOLO model: {e}")
    model = None

def send_line_message(reply_token, messages):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE"""
    url = 'https://api.line.me/v2/bot/message/reply'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    
    if not isinstance(messages, list):
        messages = [messages]

    data = {
        'replyToken': reply_token,
        'messages': messages
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=3)
        success = response.status_code == 200
        print(f"LINE API Response: {response.status_code}")
        if not success:
            print(f"Response content: {response.text}")
        return success
    except Exception as e:
        print(f"Error sending message: {e}")
        return False

def analyze_image(image_content):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å binary content"""
    try:
        if model is None:
            return None, 0

        # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô PIL Image
        image = Image.open(io.BytesIO(image_content))
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        results = model.predict(image, verbose=False)
        
        if len(results) == 0:
            return None, 0

        result = results[0]
        if not hasattr(result, 'probs') or result.probs is None:
            return None, 0

        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        probs = result.probs.data
        class_idx = int(torch.argmax(probs))
        confidence = float(probs[class_idx])
        class_name = result.names[class_idx]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if class_name not in ['Normal', 'Rust']:
            return None, 0

        return class_name, confidence

    except Exception as e:
        print(f"Error analyzing image: {e}")
        return None, 0

def create_response_messages(class_name, confidence):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ
    if not class_name or confidence < 0.5:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏≠‡∏á confidence
        return [{
            'type': 'text',
            'text': "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ\n\n"
                   "üî∏ ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:\n"
                   "- ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n"
                   "- ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                   "- ‡∏°‡∏∏‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n"
                   "- ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n"
                   "üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n"
                   "1. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                   "2. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n"
                   "3. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡πÉ‡∏ö\n"
                   "4. ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£"
        }]

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏°
    if class_name == 'Rust':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ {confidence:.1%}):\n"
                   f"‚ö†Ô∏è ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏™‡∏ô‡∏¥‡∏° (Rust Disease)\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:\n"
                   f"- ‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏î‡∏á‡∏ö‡∏ô‡πÉ‡∏ö\n"
                   f"- ‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏ú‡∏á‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÉ‡∏ï‡πâ‡πÉ‡∏ö\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:\n"
                   f"1. ‡πÅ‡∏¢‡∏Å‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏≤‡∏ó‡∏≥‡∏•‡∏≤‡∏¢\n"
                   f"2. ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤\n"
                   f"3. ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô\n"
                   f"4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"
        }]
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    elif class_name == 'Normal':
        return [{
            'type': 'text',
            'text': f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ {confidence:.1%}):\n"
                   f"‚úÖ ‡πÉ‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ\n\n"
                   f"üî∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÉ‡∏ö:\n"
                   f"- ‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥\n"
                   f"- ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ\n\n"
                   f"üî∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•:\n"
                   f"1. ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥\n"
                   f"2. ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠\n"
                   f"3. ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n"
                   f"4. ‡∏´‡∏°‡∏±‡πà‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
        }]
    
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    return [{
        'type': 'text',
        'text': "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ\n\n"
               "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n"
               "‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
    }]

def process_image_message(image_id, reply_token):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    try:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        url = f'https://api-data.line.me/v2/bot/message/{image_id}/content'
        headers = {'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'}
        
        response = requests.get(url, headers=headers, timeout=3)
        if response.status_code != 200:
            send_line_message(reply_token, [{
                'type': 'text',
                'text': '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            }])
            return

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        class_name, confidence = analyze_image(response.content)
        messages = create_response_messages(class_name, confidence)
        send_line_message(reply_token, messages)

    except Exception as e:
        print(f"Error in process_image_message: {e}")
        send_line_message(reply_token, [{
            'type': 'text',
            'text': '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }])

@app.route("/webhook", methods=['POST'])
def webhook():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ webhook request"""
    try:
        data = request.get_json()
        if not data or 'events' not in data:
            return 'OK', 200

        for event in data['events']:
            if event.get('type') != 'message':
                continue

            message = event.get('message', {})
            reply_token = event.get('replyToken')

            if not reply_token:
                continue

            if message.get('type') == 'image':
                process_image_message(message.get('id'), reply_token)
            elif message.get('type') == 'text':
                text = message.get('text', '').strip().lower()
                if text in ['help', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:\n\n"
                               "1. ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û:\n"
                               "- ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ\n"
                               "- ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
                               "- ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô\n\n"
                               "2. ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û:\n"
                               "- ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏†‡∏≤‡∏û\n"
                               "- ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà\n\n"
                               "3. ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•:\n"
                               "- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n"
                               "- ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"
                    }])
                else:
                    send_line_message(reply_token, [{
                        'type': 'text',
                        'text': "üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö\n\n"
                               "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n"
                               "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n"
                               "‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'help' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    }])

        return 'OK', 200

    except Exception as e:
        print(f"Error in webhook: {e}")
        return 'OK', 200

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
